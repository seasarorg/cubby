~~
~~ Copyright 2004-2009 the Seasar Foundation and the Others.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
  --------
  セットアップ
  --------
  baba
  --------
  2009-03-14
  --------

{目次}

 *{{{#前提}前提}}

 *{{{#プロジェクトの作成}プロジェクトの作成}}

  *{{{#Maven2_によるプロジェクトの雛形作成}Maven2 によるプロジェクトの雛形作成}}

  *{{{#Tomcat_の起動}Tomcat の起動}}

  *{{{#Eclipse_を使った開発}Eclipse を使った開発}}

  *{{{#NetBeans_を使った開発}NetBeans を使った開発}}

 *{{{#各種ファイル}各種ファイル}}

  *{{{#必要なライブラリ_WEB-INFlib}必要なライブラリ (WEB-INF/lib)}}

  *{{{#デプロイメント記述子_WEB-INFweb.xml}デプロイメント記述子 (WEB-INF/web.xml)}}

  *{{{#diconファイル_WEB-INFclasses}diconファイル (WEB-INF/classes)}}

  *{{{#プロパティファイル_WEB-INFclasses}プロパティファイル (WEB-INF/classes)}}

{前提}

 Cubby は Seasar2 / Guice / Spring Framework に統合して動作させることを前提としています。

{プロジェクトの作成}

 以下のセットアップ手順は Maven 2.0.7 以降がインストールしてあることを前提としています。
 Maven2についての技術情報は、{{{link.html#Maven2}リンク集}}をご覧ください。

 Cubby は Maven2 の archetype コンテナを用意していますので、これを使用してプロジェクトの雛形を作成することをおすすめします。
 作成される雛形にはデータベースと連携した WEB アプリケーションを作成するための web.xml や pom.xml の基本的な設定が含まれます。

 具体的な作成方法やプロジェクトに必要なファイルは使用するコンテナに応じたページを参照してください。

 {{{seasar2.html}Seasar2 統合}}

 {{{guice.html}Guice 統合}}
 
 {{{spring.html}Spring Framework 統合}}


*{Tomcat の起動}

 プロジェクトのディレクトリで以下のコマンドを実行すると Tomcat が起動し、ブラウザで「http://localhost:8080/(アーティファクトID)/」にアクセスすることで、雛形アプリケーションの動作を確認できます。

+------------------------------------------------------+
mvn tomcat:run
+------------------------------------------------------+

 Mayaaを使用する場合は依存する jarファイルを「src/main/webapps/WEB-INF」以下に配備する必要があります。
 プロジェクトのディレクトリで以下のコマンドを実行し、jarファイルを配備してからTomcatを実行してください。
 (EclipseからWTP等で実行する場合は不要です)

+------------------------------------------------------+
mvn war:inplace
+------------------------------------------------------+

 作成されたpom.xmlには、リリース時に設定ファイル等を置き換えてWARを作成するプロファイルが含まれています。\
 プロジェクトのディレクトリで以下のプロファイルを指定して(-Pproduction)実行すると、「src/production/resources」にあるファイルが「src/main/resources」のファイルより優先されてWARが作成されます。
 初期設定ではリリース向けのlog4j.propertiesとenv.txt(productが設定)WARが作成されるため、Seasar2でHotDeployのままWARを作成する心配がありません。同じ方法でJDBCの接続設定なども切り替えると便利です。\
  (参考：{{{http://maven.apache.org/guides/introduction/introduction-to-profiles.html}Maven2のプロファイル解説}}、{{{http://s2container.seasar.org/2.4/ja/DIContainer.html#Env}Seasar2のevn.txtについての説明}})

+------------------------------------------------------+
mvn clean package -Pproduction
+------------------------------------------------------+

*{Eclipse を使った開発}

**プロジェクトの設定

 プロジェクトを Eclipse で開発する場合は、Maven2 で Eclipse のワークスペースやプロジェクトを設定します。

 [[1]]ワークスペースのクラスパス変数

      Eclipse ワークスペースにビルドパスのクラスパス変数(M2_REPO)を追加します。
      以下のコマンドを実行してください。
      この作業はワークスペースごとに１度行えば、次回からは必要ありません。

+------------------------------------------------------+
mvn eclipse:add-maven-repo -Declipse.workspace=(ワークスペースのディレクトリ 例 "C:/eclipse/workspace")
+------------------------------------------------------+

 [[2]]プロジェクト設定ファイル

      プロジェクトに .project や .classpath などといった Eclipse プロジェクトの設定ファイルを作成します。\
      プロジェクトのディレクトリに移動して以下のコマンドを実行してください。

+------------------------------------------------------+
mvn eclipse:eclipse -DdownloadSources=true
+------------------------------------------------------+

      Cubby や Seasar2 など、プロジェクトに必要な jar ファイルがダウンロードされ、WTP でサーバーアプリケーションを実行するための準備が整います。\
      「-DdownloadSources=true」を付けることで、jar ファイルと一緒にソースコードの jar ファイルがダウンロードされます。\
      eclipse:eclipseの際に、ソースのjarがあれば、自動的にEclipse上でアタッチされた設定になるので便利です。

 [[3]]プロジェクトのインポート

      プロジェクトを Eclipse のワークスペースへインポートします。

      [[1]]File(ファイル)メニュー → Import(インポート)を選択します。

      [[2]]General(共通) → Existing Project Into Workspace (既存プロジェクトをワークスペースへ) を選択します。

      [[3]]Select root directory(ルートディレクトリの選択)でプロジェクトのルートディレクトリを指定します。

      [[4]]Finish(終了)を押します。

      []

      プロジェクトがインポートされます。

 [[4]]WTPのServer設定

      WTPのServer設定が行われていない場合、以下の手順で Server として Tomcat 6.0 を設定します。

      [[1]]Window(ウィンドウ)メニュー → Show View(ビューの表示) → Other...(その他)を選択します。

      [[2]]Server → Serversを選択 → OK。Serversビューが表示されます。

      [[3]]Serversビューの上で右クリック → New → Server を選択。
      
      [[4]]Apache → Tomcat v6.0 Serverを選択 → Nextを選択。

      [[5]]Tomcat installation directoryでTomcatのルートディレクトリを選択 → Nextを選択。

      [[6]]「cubby-examples-hello」プロジェクトをConfigred ProjectにAdd。
      
      [[7]]Finishを選択。
      
      []

      ServerビューにTomcatが追加されます。

 [[5]]WTPからTomcatを起動する。
 
      [[1]]ServersビューのTomcatを選択して、右クリック → Startを選択。
      
      []

      Tomcatが起動して、ログがコンソールに出力されます。

 [[6]]WTP環境でHotDeployの設定を有効にする。 

      {{{http://d.hatena.ne.jp/uriyuri/20080328/1206694040}http://d.hatena.ne.jp/uriyuri/20080328/1206694040}}の設定を行うことで、
      WTP環境でワーキングフォルダをPublishingせずに、HotDeployで開発できます。

[]

**コードテンプレート

  以下のコードテンプレート設定を Eclipse にインポートすることで「アクションメソッドのコード雛形作成」「バリデーションフィールドのコード雛形作成」が行えます。 

  [[1]]コードテンプレート定義ファイル「{{{./eclipse-code-templates/cubby-eclipse-code-templates-1.0.0.xml}cubby-eclipse-code-templates-1.0.0.xml}}」をダウンロードします。

  [[2]]Eclipse の設定を開きます。(Windowsなら「ウインドウ(Window)->設定(Preference)」、MacOSXなら「Eclipse」->設定(Preference)」)

  [[3]]「Java->エディタ(Editor)->テンプレート(Templates)」を選択し、「インポート(Import)」ボタンをクリックします。

  [[4]]1.でダウンロードしたコードテンプレート定義ファイルを選択します。

  [[5]]以下のコードテンプレートによるコード補完が Java エディタ上で使用できるようになります。「cu」と入力して「コントロールキー＋スペースキー」を押してみてください。

*------------------------*------------------------------------*
| 補完名                 | 内容                               |
*------------------------*------------------------------------*
| cubby_action_method    | アクションメソッドの雛形作成       |
*------------------------*------------------------------------*
| cubby_validation_field | バリデーションフィールドの雛形作成 |
*------------------------*------------------------------------*
コードテンプレート

[]

*{NetBeans を使った開発}

 {{{http://sugmak.com/2008/10/netbeans65rc1cubby111.html}こちら}}をご参照ください。

