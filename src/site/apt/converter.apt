~~
~~ Copyright 2004-2009 the Seasar Foundation and the Others.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~     http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
~~ either express or implied. See the License for the specific language
~~ governing permissions and limitations under the License.
~~
  --------
  コンバータ
  --------
  baba
  --------
  2009-07-10
  --------

{目次}

 *{{{#コンバータ}コンバータ}}

  *{{{#コンバータによるバリデーション}コンバータによるバリデーション}}

  *{{{#独自のコンバータを作成する}独自のコンバータを作成する}}

  *{{{#リクエストパラメータのバインド}リクエストパラメータのバインド}}

  *{{{#特定のコンバータを指定する}特定のコンバータを指定する}}

{コンバータ}

  コンバータとは、String 型や FileItem 型のリクエストパラメータをフォームオブジェクトのプロパティの型へ変換するクラスです。
  {{{cubby/apidocs/org/seasar/cubby/converter/Converter.html}Converter}} を実装します。

  型変換に失敗した場合、フォームオブジェクトのプロパティには null が設定されます。

  標準で提供されるコンバータは{{{cubby/apidocs/index.html?org/seasar/cubby/converter/impl/package-summary.html}APIドキュメント}}をご覧下さい。

 *{コンバータによるバリデーション}

  コンバータでの型変換に失敗したことをバリデーション時に検出することができます。

  ValidationRules を定義するときに org.seasar.cubby.validator.ConversionValidationRule を追加してください。

+------------------------------------------------------+
	public ValidationRules validation = new DefaultValidationRules("todo.") {
		@Override
		public void initialize(String resourceKeyPrefix) {
			add(new ConversionValidationRule(resourceKeyPrefix));
		}
	};
+------------------------------------------------------+

 *{独自のコンバータを作成する}

  独自のコンバータを作成することによって、標準ではサポートしていない型へリクエストパラメータをバインドすることができます。

  以下の BookConverter.java は ISBN を表す文字列からデータベースを参照して Book に変換するコンバータです。
  変換結果は

+------------------------------------------------------+
		:
	@RequestParameter
	public Book book;
		:
+------------------------------------------------------+

  のような Book 型のプロパティにバインドされます。

 <<BookConverter.java>>

+------------------------------------------------------+
package org.seasar.cubby.examples.other.web.converter;

import org.seasar.cubby.converter.ConversionHelper;
import org.seasar.cubby.converter.impl.AbstractConverter;

/**
 * ISDN を表す文字列と Book を相互変換するコンバータです。
 */
public class BookConverter extends AbstractConverter {

	public BookDao bookDao;

	/**
	 * Book.class を返すことで、このコンバータが任意の値を Book へ変換できることを示します。
	 */
	public Class<?> getObjectType() {
		return Book.class;
	}

	/**
	 * リクエストパラメータ(ここではISBN)を Book へ変換します。
	 */
	public Object convertToObject(Object value, Class<?> objectType,
			ConversionHelper helper) {
		if (value == null) {
			return null;
		}
		String isbn13 = value.toString();
		Book book = bookDao.findByIsbn13(isbn13);
		return book;
	}

	/**
	 * Book から表示用の文字列(ISBN)へ変換します。
	 */
	public String convertToString(Object value, ConversionHelper helper) {
		Book book = Book.class.cast(value);
		return book.getIsbn13();
	}

}
+------------------------------------------------------+

  作成したコンバータはコンテナから取得されます。
  使用するコンテナに登録しておいてください。

 *{特定のコンバータを指定する}

  通常は自動的にプロパティの型にマッチするコンバータが選択されますが、特定のコンバータを指定することもできます。

  以下の例では address というフィールドにトリムされた文字列を設定します。

+------------------------------------------------------+
		:
	@RequestParameter(converter = TrimConverter.class)
	public String address;
		:
+------------------------------------------------------+

+------------------------------------------------------+
public class TrimConverter extends AbstractConverter {
    public Object convertToObject(Object value, Class<?> objectType, ConversionHelper helper) throws ConversionException {
        if (value == null) {
            return null;
        }
        return value.toString().trim();
}
+------------------------------------------------------+
