  --------
  アクション
  --------
  agata
  baba
  --------
  2008-03-01
  --------

{目次}

 *{{{#アクション}アクション}}

 *{{{#アクションの定義}アクションの定義}}

  *{{{#アクションクラス}アクションクラス}}

  *{{{#アクションメソッド}アクションメソッド}}

  *{{{#ActionResult}ActionResult}}

  *{{{#アノテーション}アノテーション}}

  *{{{#事前処理事後処理}事前処理・事後処理}}

 *{{{#アクションのテスト}アクションのテスト}}

{アクション}

 アクションとは特定の URI へのリクエストに対応する処理で、Cubby のユーザーが実装する部分です。\
 URI に対応するメソッドをアクションメソッド、アクションメソッドが定義されたクラスをアクションクラスといいます。

{アクションの定義}

*{アクションクラス}

 {{{cubby/apidocs/org/seasar/cubby/action/Action.html}Action}} を継承し、〜Action という名前のクラスをアクションクラスとして認識します。

*{アクションメソッド}

 アクションクラスに定義されたメソッドのうち、アクセス修飾子が public で戻り値が {{{cubby/apidocs/org/seasar/cubby/action/ActionResult.html}ActionResult}} のメソッドをアクションメソッドとして認識します。\
 このメソッドは AOP によってエンハンスされ、メソッド実行時に以下の処理が実行されるようになります。

 *アクションの初期化やリクエストパラメータからフォームオブジェクトへのバインド ({{{cubby/apidocs/org/seasar/cubby/interceptor/InitializeInterceptor.html}InitializeInterceptor}})

 *入力検証 ({{{cubby/apidocs/org/seasar/cubby/interceptor/ValidationInterceptor.html}ValidationInterceptor}})

[]

 これらは AOP によってメソッド自体がエンハンスされるため、アクションメソッドの中から他のアクションメソッドを呼び出した場合も上記の処理が実行されます。

*{ActionResult}

 以下のクラスは {{{cubby/apidocs/org/seasar/cubby/action/ActionResult.html}ActionResult}} を実装するクラスで、アクションメソッドの戻り値として使用できます。

*-------------------------------------------------------------------+--------------------------------------------------------------------+
|| クラス名                                                         || 説明                                                              |
*-------------------------------------------------------------------+--------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Forward.html}Forward}}   | 指定されたパスにフォワードします。                                 |
*-------------------------------------------------------------------+--------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Redirect.html}Redirect}} | 指定されたパスにリダイレクトします。                               |
*-------------------------------------------------------------------+--------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Direct.html}Direct}}     | 何も処理を行いません。アクションメソッド中でレスポンスに直接書き込みます。ファイルや画像をブラウザに返す時に使用します。                   |
*-------------------------------------------------------------------+--------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Json.html}Json}}         | 指定されたオブジェクトを Json 形式に変換してレスポンスを返します。 |
*-------------------------------------------------------------------+--------------------------------------------------------------------+

[]

*{アノテーション}

 アクションクラスやアクションメソッドに以下のアノテーションを指定することで、アクションのメタ情報を設定することができます。

*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
|| アノテーション名                                                                  || 説明                                                                    || 省略した場合                                    |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Path.html}@Path}}                         | アクションメソッドに対応する URI を指定します。                          | XxxAction#yyyy() の場合は /xxx/yyyy になります。 |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/OnSubmit.html}@OnSubmit}}                 | アクションメソッドへ振り分けるためのリクエストパラメータ名を指定します。 | リクエストパラメータによる振り分けを行いません。 |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Accept.html}@Accept}}                     | アクションメソッドが受け付ける HTTP メソッドを指定します。               | GET と POST に対応するメソッドになります。       |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Form.html}@Form}}                         | リクエストパラメータをバインドするオブジェクトを指定します。             | アクションクラスのインスタンスになります。       |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/InitializeMethod.html}@InitializeMethod}} | アクションメソッドごとの初期化メソッドをを指定します。                   | メソッドごとの初期化メソッドを実行しません。     |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/InitializeMethod.html}@PreRenderMethod}}  | アクションメソッドごとのフォワード前メソッドを指定します。               | メソッドごとのフォワード前メソッドを実行しません。 |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/InitializeMethod.html}@PostRenderMethod}} | アクションメソッドごとのフォワード後メソッドを指定します。               | メソッドごとのフォワード後メソッドを実行しません。 |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Validation.html}@Validation}}             | 入力検証を定義したプロパティを指定します。                               | 入力検証を行いません。                           |
*------------------------------------------------------------------------------------+--------------------------------------------------------------------------+----------------------------------------------------+

[]

*{事前処理・事後処理}

 アクションクラスにある以下のメソッドをオーバーライドすることで、アクションメソッド実行の前後にフック処理を記述することができます。\
 これらはアクションクラスごとの処理となるので、アクションメソッドごとに異なる処理をしたい場合は{{{#アノテーション}アノテーション}}でメソッドを指定してください。

*---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
|| メソッド名                                                                                 || 説明                                                                                                                                                      |
*---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Action.html#initialize()}Action#initialize}}       | アクションメソッドの実行前に呼ばれます。パラメータのバインディング前に呼ばれるので、パラメータを使用したい場合はリクエストから直接取得する必要があります。 |
*---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Action.html#prerender()}Action#prerender}}         | フォーワードの直前で呼ばれます。対象のActionクラスのフォワード先で必ず使用する共通のデータなどを取得する目的で使用します。                                 |
*---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+
| {{{cubby/apidocs/org/seasar/cubby/action/Action.html#postrender()}Action#postrender}}       | フォワードの直後で呼ばれます。通常はあまり使用することはないでしょう。                                                                                     |
*---------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+

 また、アクションメソッド実行の前後に処理を組み込みたい場合は、{{{http://s2container.seasar.org/2.4/ja/aop.html}Seasar の AOP}} を使用して処理をフックすることもできます。

[]

{アクションのテスト}

 アクションの単体テストは {{{cubby/apidocs/org/seasar/cubby/unit/CubbyTestCase.html}CubbyTestCase}} を使用します。
 Seasar の S2Unit の機能を全て使用できるので
 {{{http://s2container.seasar.org/2.4/ja/S2Unit.html}SeasarのS2Unitのドキュメント}}も合わせてご覧ください。

 [[1]]CubbyTestCase を継承して、XXXXTest を作成します。 

 [[2]]テスト対象のアクションをフィールドに用意します。これはアクション実行後に結果を取得するためです。

 [[3]]setUpメソッドで app.dicon を読み込み、 Seasar2 で管理されるコンポーネント(テスト対象のアクションを含む)を初期化します。

 [[4]]アクションのメソッドごとにテストメソッドを書きます。メソッド名は test から始めます。

 [[5]]リクエストパラメータのセットなど、テストに必要な初期化処理は各テストメソッド用のセットアップメソッドで行います。メソッド名は setup から始めます。

 [[6]]{{{cubby/apidocs/org/seasar/cubby/unit/CubbyTestCase.html#processAction(java.lang.String)}CubbyTestCase#processAction}} にリクエストのパスを指定して、アクションメソッドを実行します。CoolURI(パラメータ付きのURI)の場合、パスにパラメータを含んで実行します(TodoActionTest#)。
 
 [[7]]戻り値を{{{cubby/apidocs/org/seasar/cubby/unit/CubbyTestCase.html#assertPathEquals(java.lang.Class,java.lang.String,org.seasar.cubby.action.ActionResult)}CubbyTestCase#processAction}}で結果の ActionResult の型とパスをチェックします。パスのチェックは Forward と Redirect の場合のみ行われます。

 [[8]]必要に応じてアクションクラスのフィールドやリクエストやセッションの値をチェックします。

 <<HelloActionTest.java>>
 
+------------------------------------------------------+
package org.seasar.cubby.examples.other.web.hello;

import org.seasar.cubby.action.ActionResult;
import org.seasar.cubby.action.Forward;
import org.seasar.cubby.unit.CubbyTestCase;

public class HelloActionTest extends CubbyTestCase {

	// 対象のアクション
	private HelloAction action;
	
	// 初期化処理
    protected void setUp() throws Exception {
    	// diconファイルの読み込み
        include("app.dicon");
    }
    
	public void testIndex() throws Exception {
		// アクションの実行
		ActionResult result = processAction("/hello/");
		// 結果のチェック
		assertPathEquals(Forward.class, "input.jsp", result);
	}

	public void setupMessage() {
	    // リクエストパラメータのセット
		getRequest().addParameter("name", "name1");
	}
	
	public void testMessage() throws Exception {
		// アクションの実行
		ActionResult result = processAction("/hello/message");
		// 結果のチェック
		assertPathEquals(Forward.class, "result.jsp", result);
		// 実行後のアクションの状態を確認
		assertEquals("name1", action.name);
	}	
}
+------------------------------------------------------+

 <<TodoActionTest.java>>

+------------------------------------------------------+
package org.seasar.cubby.examples.todo.action;

import org.seasar.cubby.action.ActionResult;
import org.seasar.cubby.action.Forward;
import org.seasar.cubby.action.Redirect;
import org.seasar.cubby.examples.RunDdlServletRequestListener;
import org.seasar.cubby.unit.CubbyTestCase;

public class TodoActionTest extends CubbyTestCase {

	private TodoAction action;
	
    protected void setUp() throws Exception {
        include("app.dicon");
        RunDdlServletRequestListener listener = new RunDdlServletRequestListener();
        listener.requestInitialized(null);
    }

    @Override
    protected void setUpAfterBindFields() throws Throwable {
    	super.setUpAfterBindFields();
		getRequest().addParameter("userId", "test");
		getRequest().addParameter("password", "test");
		// 後続のテストを実行するためにログインアクションを実行
		assertPathEquals(Redirect.class, "/todo/", processAction("/todo/login/process"));
    }
    
	public void testShow() throws Exception {
        this.readXlsAllReplaceDb("TodoActionTest_PREPARE.xls");
        // CoolURIの場合のテスト
		ActionResult result = processAction("/todo/1");
		assertPathEquals(Forward.class, "show.jsp", result);
		assertEquals(new Integer(1), action.id);
		assertEquals("todo1", action.text);
		assertEquals("todo1 memo", action.memo);
		assertEquals(new Integer(1), action.todoType.getId());
		assertEquals("type1", action.todoType.getName());
		assertEquals("2008-01-01", action.limitDate);
	}
}
+------------------------------------------------------+
